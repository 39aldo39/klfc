// Generated by KLFC 1.4.2
// https://github.com/39aldo39/klfc

default partial
xkb_symbols "basic" {
    key.type[Group1] = "NONE_SHIFT_ALTGR_SHIFT+ALTGR_EXTEND";
    key <TLDE> { [        grave,   asciitilde,   dead_tilde,   VoidSymbol, Pointer_EnableKeys ],
                 actions[Group1] = [ NoAction(), NoAction(), NoAction(), NoAction(), LockControls(ctrls=MouseKeys) ] };
    key <AE01> { [            1,       exclam,   exclamdown,  onesuperior,           F1 ] };
    key <AE02> { [            2,           at,    masculine,  twosuperior,           F2 ] };
    key <AE03> { [            3,   numbersign,  ordfeminine, threesuperior,           F3 ] };
    key <AE04> { [            4,       dollar,         cent,     sterling,           F4 ] };
    key <AE05> { [            5,      percent,     EuroSign,          yen,           F5 ] };
    key <AE06> { [            6,  asciicircum,      hstroke,      Hstroke,           F6 ] };
    key <AE07> { [            7,    ampersand,          eth,          ETH,           F7 ] };
    key <AE08> { [            8,     asterisk,        thorn,        THORN,           F8 ] };
    key <AE09> { [            9,    parenleft, leftsinglequotemark, leftdoublequotemark,           F9 ] };
    key <AE10> { [            0,   parenright, rightsinglequotemark, rightdoublequotemark,          F10 ] };
    key <AE11> { [        minus,   underscore,       endash,       emdash,          F11 ] };
    key <AE12> { [        equal,         plus,     multiply,     division,          F12 ] };
    key.type[Group1] = "NONE_SHIFT_ALTGR_SHIFT+ALTGR_EXTEND_ALPHABETIC";
    key <AD01> { [            q,            Q,   adiaeresis,   Adiaeresis,       Escape ] };
    key.type[Group1] = "NONE_SHIFT_ALTGR_SHIFT+ALTGR_EXTEND_SHIFT+EXTEND_ALPHABETIC";
    key <AD02> { [            w,            W,        aring,        Aring, XF86ScrollUp, XF86ScrollRight ],
                 actions[Group1] = [ NoAction(), NoAction(), NoAction(), NoAction(), PtrBtn(button=4), PtrBtn(button=6) ] };
    key.type[Group1] = "NONE_SHIFT_ALTGR_SHIFT+ALTGR_EXTEND_ALPHABETIC";
    key <AD03> { [            f,            F,       atilde,       Atilde,     XF86Back ] };
    key <AD04> { [            p,            P,       oslash,       Oslash,  XF86Forward ] };
    key <AD05> { [            g,            G,  dead_ogonek,   VoidSymbol,   Pointer_Up ],
                 actions[Group1] = [ NoAction(), NoAction(), NoAction(), NoAction(), MovePtr(x=+0,y=-8) ] };
    key <AD06> { [            j,            J,      dstroke,      Dstroke,        Prior ] };
    key <AD07> { [            l,            L,      lstroke,      Lstroke,         Home ] };
    key <AD08> { [            u,            U,       uacute,       Uacute,           Up ] };
    key <AD09> { [            y,            Y,   udiaeresis,   Udiaeresis,          End ] };
    key.type[Group1] = "NONE_SHIFT_ALTGR_SHIFT+ALTGR_EXTEND";
    key <AD10> { [    semicolon,        colon,   odiaeresis,   Odiaeresis,       Delete ] };
    key <AD11> { [  bracketleft,    braceleft, guillemotleft,        U2039,       Escape ] };
    key <AD12> { [ bracketright,   braceright, guillemotright,        U203A,       Insert ] };
    key.type[Group1] = "NONE_SHIFT_ALTGR_SHIFT+ALTGR_EXTEND_SHIFT+EXTEND";
    key <BKSL> { [    backslash,          bar,        UE000,   VoidSymbol, XF86Favorites, XF86MyComputer ],
                 actions[Group1] = [ NoAction(), NoAction(), NoAction(), NoAction(), NoAction(), Redirect(key=<I165>,clearMods=Shift) ] };
    key.type[Group1] = "NONE_SHIFT_ALTGR_SHIFT+ALTGR_EXTEND_ALPHABETIC";
    key <AC01> { [            a,            A,       aacute,       Aacute,        Alt_L ],
                 actions[Group1] = [ NoAction(), NoAction(), NoAction(), NoAction(), SetMods(mods=Alt) ],
                 vmods=Alt };
    key.type[Group1] = "NONE_SHIFT_ALTGR_SHIFT+ALTGR_EXTEND_SHIFT+EXTEND_ALPHABETIC";
    key <AC02> { [            r,            R,   dead_grave,   VoidSymbol, XF86ScrollDown, XF86ScrollLeft ],
                 actions[Group1] = [ NoAction(), NoAction(), NoAction(), NoAction(), PtrBtn(button=5), PtrBtn(button=7) ] };
    key.type[Group1] = "NONE_SHIFT_ALTGR_SHIFT+ALTGR_EXTEND_ALPHABETIC";
    key <AC03> { [            s,            S,       ssharp,   VoidSymbol,      Shift_L ],
                 actions[Group1] = [ NoAction(), NoAction(), NoAction(), NoAction(), SetMods(mods=Shift) ] };
    key <AC04> { [            t,            T,   dead_acute, dead_doubleacute,    Control_L ],
                 actions[Group1] = [ NoAction(), NoAction(), NoAction(), NoAction(), SetMods(mods=Control) ] };
    key <AC05> { [            d,            D, dead_diaeresis,   VoidSymbol, Pointer_Down ],
                 actions[Group1] = [ NoAction(), NoAction(), NoAction(), NoAction(), MovePtr(x=+0,y=+8) ] };
    key <AC06> { [            h,            H,   dead_caron,   VoidSymbol,         Next ] };
    key <AC07> { [            n,            N,       ntilde,       Ntilde,         Left ] };
    key <AC08> { [            e,            E,       eacute,       Eacute,         Down ] };
    key <AC09> { [            i,            I,       iacute,       Iacute,        Right ] };
    key <AC10> { [            o,            O,       oacute,       Oacute,    BackSpace ] };
    key.type[Group1] = "NONE_SHIFT_ALTGR_SHIFT+ALTGR_EXTEND";
    key <AC11> { [   apostrophe,     quotedbl,       otilde,       Otilde,         Menu ] };
    key.type[Group1] = "NONE_SHIFT_ALTGR_SHIFT+ALTGR_EXTEND_ALPHABETIC";
    key <AB01> { [            z,            Z,           ae,           AE,            z ],
                 actions[Group1] = [ NoAction(), NoAction(), NoAction(), NoAction(), Redirect(key=<AB01>,mods=Control) ] };
    key <AB02> { [            x,            X, dead_circumflex,   VoidSymbol,            x ],
                 actions[Group1] = [ NoAction(), NoAction(), NoAction(), NoAction(), Redirect(key=<AB02>,mods=Control) ] };
    key <AB03> { [            c,            C,     ccedilla,     Ccedilla,            c ],
                 actions[Group1] = [ NoAction(), NoAction(), NoAction(), NoAction(), Redirect(key=<AB03>,mods=Control) ] };
    key <AB04> { [            v,            V,           oe,           OE,            v ],
                 actions[Group1] = [ NoAction(), NoAction(), NoAction(), NoAction(), Redirect(key=<AB04>,mods=Control) ] };
    key <AB05> { [            b,            B,   dead_breve,   VoidSymbol, Pointer_Button1 ],
                 actions[Group1] = [ NoAction(), NoAction(), NoAction(), NoAction(), PtrBtn(button=1) ] };
    key <AB06> { [            k,            K, dead_abovering,   VoidSymbol, Pointer_Button2 ],
                 actions[Group1] = [ NoAction(), NoAction(), NoAction(), NoAction(), PtrBtn(button=2) ] };
    key <AB07> { [            m,            M,  dead_macron,   VoidSymbol, Pointer_Button3 ],
                 actions[Group1] = [ NoAction(), NoAction(), NoAction(), NoAction(), PtrBtn(button=3) ] };
    key.type[Group1] = "NONE_SHIFT_ALTGR_SHIFT+ALTGR_EXTEND";
    key <AB08> { [        comma,         less, dead_cedilla,   VoidSymbol, Pointer_Left ],
                 actions[Group1] = [ NoAction(), NoAction(), NoAction(), NoAction(), MovePtr(x=-8,y=+0) ] };
    key <AB09> { [       period,      greater, dead_abovedot,   VoidSymbol, Pointer_Right ],
                 actions[Group1] = [ NoAction(), NoAction(), NoAction(), NoAction(), MovePtr(x=+8,y=+0) ] };
    key <AB10> { [        slash,     question, questiondown,   VoidSymbol,    Multi_key ] };
    key.type[Group1] = "NONE_ALTGR_SHIFT+ALTGR_EXTEND";
    key <SPCE> { [        space,        space, nobreakspace,       Return ] };
    key.type[Group1] = "NONE_EXTEND";
    key <ESC> { [       Escape,    Caps_Lock ],
                 actions[Group1] = [ NoAction(), LockMods(mods=Lock) ] };
    key.type[Group1] = "NONE_EXTEND_SHIFT+EXTEND";
    key <FK01> { [           F1, XF86AudioPlay, XF86AudioPause ],
                 actions[Group1] = [ NoAction(), NoAction(), Redirect(key=<I209>,clearMods=Shift) ] };
    key <FK02> { [           F2, XF86AudioPrev, XF86AudioRewind ],
                 actions[Group1] = [ NoAction(), NoAction(), Redirect(key=<I176>,clearMods=Shift) ] };
    key <FK03> { [           F3, XF86AudioNext, XF86AudioForward ],
                 actions[Group1] = [ NoAction(), NoAction(), Redirect(key=<I216>,clearMods=Shift) ] };
    key <FK04> { [           F4, XF86AudioStop,    XF86Eject ],
                 actions[Group1] = [ NoAction(), NoAction(), Redirect(key=<I169>,clearMods=Shift) ] };
    key <FK05> { [           F5, XF86AudioMute,   XF86Reload ],
                 actions[Group1] = [ NoAction(), NoAction(), Redirect(key=<I181>,clearMods=Shift) ] };
    key <FK06> { [           F6, XF86AudioLowerVolume, XF86MonBrightnessDown ],
                 actions[Group1] = [ NoAction(), NoAction(), Redirect(key=<I237>,clearMods=Shift) ] };
    key <FK07> { [           F7, XF86AudioRaiseVolume, XF86MonBrightnessUp ],
                 actions[Group1] = [ NoAction(), NoAction(), Redirect(key=<I238>,clearMods=Shift) ] };
    key <FK08> { [           F8, XF86AudioMedia,    XF86Sleep ],
                 actions[Group1] = [ NoAction(), NoAction(), Redirect(key=<I150>,clearMods=Shift) ] };
    key <FK09> { [           F9, XF86HomePage,      XF86WWW ],
                 actions[Group1] = [ NoAction(), NoAction(), Redirect(key=<I158>,clearMods=Shift) ] };
    key <FK10> { [          F10,   XF86Search,     XF86Mail ],
                 actions[Group1] = [ NoAction(), NoAction(), Redirect(key=<I163>,clearMods=Shift) ] };
    key <FK11> { [          F11, XF86Explorer,  XF86Launch1 ],
                 actions[Group1] = [ NoAction(), NoAction(), Redirect(key=<I156>,clearMods=Shift) ] };
    key <FK12> { [          F12, XF86Calculator,  XF86Launch2 ],
                 actions[Group1] = [ NoAction(), NoAction(), Redirect(key=<I157>,clearMods=Shift) ] };
    key.type[Group1] = "ONE_LEVEL";
    key <CAPS> { [ ISO_Level5_Shift ],
                 actions[Group1] = [ SetMods(mods=LevelFive) ],
                 vmods=LevelFive };
    modifier_map Mod3 { ISO_Level5_Shift };
    include "level3(ralt_switch)"
};
